Operators:
    Operator will perform operation on operands(2)
    Python is providing 8 types of operations
    1.Arthematic operator
    2.Relation operator
    3.Logical operator
    4.Assignment operator
    5.Short hand assignment operator
    6.Bitwise operator
    7.Membership operator
    8.Identity operator

Arthematic operators:
        + -> 10+3 = 13
        - -> 10-3 = 7
        * -> 10*3 = 30
        / -> 10/3 = 3.333
        % -> 10%3 = 1
       // -> 10//3= 3
       ** -> 10**3 =100



In python the Arthematic operators with follow  "BODMAS" Rule
B -> ()
O -> **

B & O are of same priority

D -> / % //
m -> *

D & M are of same priority

A -> +
S -> -

A & S are of same priority

Membership Operators:
Operator                    Description
in                          Evaluates to true if it finds a value in the specified sequence or false otherwise
notin                       Evaluates to true if it does not find a value in the specified sequence or false otherwise


#ex:
s1 = "This is sandhya from kvana"
print("sandhya" in s1) #True
print("k" in s1) #True
print("Sandhya" in s1) #False because the word start with capital "S"
print("z") #False


nos =[10,24,6,58,71,120,2670,2845]
print(120 in nos) #True
print(9 in nos) #False


Identity Operators:
Operator                Memory
is                      True if the operands are identical(refer to the same object)
isnot                   True if the operands are not identical(do not refer to the same object)

#ex:
a = 100
b = 200
c = 100
print(a is b) # False
print(a is c) # True
print(b is not c) # True


Relational Operators:
        Relation operator will return True or False
Operator            Meaning
>                   Greater than - True if left operand is greater than the right
<                   Less than    - True if left operand is less than the right
==                  equal to     - True if both operands are equal
!=                  notequalto   - True if operands are not equal
>=                  Greater than or equal to - True if Left operand is Greater than or equal to the right
<=                  Less than or Equal to - True if left operand is less than or equal to the right


>       ->      10>20  #False
<       ->      25<48  #True
==      ->      25==25 #True
!=      ->      25!=25 #False
>=      ->      5>=5   #True
<=      ->      8<=7   #False


ASCII:
        Stands for American Standard Code for information Interchange
        In ACII we have "256" characters which begins from '0' and end upto "255"
        65 - A       97 - a
        66 - B       98 - b
        67 - C       99 - c
        :            :
        :            :
        90 - Z       122 - z


    "A" > "A"
    65  > 65 #False
    "A" > "a"
    65 > 97 #False

 print(65) #65
 print(chr(65)) #A
 print(chr(97)) #a


 "sandhya" > "sandhya" -> False
 "sandhya" >  "Chow"   -> True
 "sandhya" >  "sandhya" -> True

Logical Operators:

Operator                Meaning
and                     True if both the operands are True
or                      True if either of the operands is True
not                     True if operands is false(Complements the operand)


Logical "and":
            The "Logical and" will execute from "Left" to "Right". If Left side expression is true controller will check
            right side else no


            L  and   R
            True -> correct
            Flase  -> Wrong  Ans: False

            -> In Logicaland both Left and Right side expression must be True
          #ex:
            10 > 20  and 40 > 50  -> False
            20 > 10  and 40 > 50  -> False
            40 == 40 and 50 > 10  -> True
          #ex:
            10 and 20 # ->20
            20 and 5    ->5
            0 and 10    ->0
            10 and 0    ->0
            "A" and "B" ->"B"
            "B" and "sandhya" -> "Sandhya"

            "A" and " "  -> ''
         (empty string(it means false))  " " and "B"  -> ""
Logical "or":
           Logicalor will execute from Left to Right.If the left side expression is "True" controller never check Right side
           and Results "True" else "no"

          L or R
          True -> wrong
          False -> correct
          #ex:
            10>20 or 40>50 -> True
            20>10 or 40>50 -> True
            40==40 or 50>10 ->True
            40!=40 or 40==40 -> True

          #ex:
            10 or 20 ->10
            0 or 20  -> 20
            20 or 0   ->20
            0 or 0    ->0
           "s" or "A" ->"s"
           ""  or "sandhya" -> "sandhya"

Logical not:
            Logical not will inverse the result
            Logical not will have right side operand only


           notTrue   #False
           notFalse  #True


Assignment Operator:
              Assignment operator will work from right to left

              L = R
              L = variables only
              R= value a = 10
                 variable b = a
                 expression c = a+b
                 function calling x = add(10,20)
                 object e = employee()


short cut assignment operator:

+=
-=
*=
/=
%=
//=
**=
>>=
<<=
ex:
x=10
x = x+5 (or) x +=5


x = 5
x **=5 (or) x = x**5
print(x)
o/p: 3125

Bitwise Operator:

Operator                Meaning
&                       Bitwise And
|                       Bitwise OR
^                       Bitwise XOR
>>                      Bitwise right shift
<<                      Bitwise left shift

-> Bit means Binary Digit.Binary means '2' they are '0' and '1'.
'0'-> means False
'1'-> means True

->To work with bitwise operators we need to convert the given values into binary format.


-> Binary format of (48) is (110000) we should always make lcm with 2 any value.


2048 1024 512 256 128 64 32 16 8 4 2 0
11    10   9   8   7   6  5  4 3 2 1 0



Bitwise And(&):
        Will work from left to right
        In biwise "and" left side expression may be true/false controller will check right

Truth Table:

1 & 1 - 1
1 & 0 - 0
0 & 0 - 0
0 & 1 - 0


print(10&15) #10

10 -> 1010
15 -> 1111
      1010

print(91&62)  #26

91 -> 1011011
62 -> 0111110
      0011010
     64 32 16 8 4 2 1

print(113&25) #17

113 -> 1110001
25  -> 0011001
       0010001

Bitwise or(|)
        Will work from left to right
        In bitwise or(|) leftside expression may be True/False controller will check right side

Truth Table
 1|1 = 1
 0|1 = 1
 1|0 = 1
 0|0 = 0


print(10|15) #15                print(91|62) #127               print(113&25) #121
 10 - 1010                       91 - 1011011                    113 - 1110001
 15 - 1111                       62 - 0111110                     25 - 0011001
      1111                            1111111                          1111001



Bitwise Xor(^):
1 ^ 1 -> 0
0 ^ 1 -> 1
1 ^ 0 -> 1
0 ^ 0 -> 0


print(10|15) #5                print(91|62) #101              print(113&25) #104
 10 - 1010                       91 - 1011011                    113 - 1110001
 15 - 1111                       62 - 0111110                     25 - 0011001
      0101                            1100101                          1101000


Bitwise LeftShift  and Bitwise RightShift

Left shift(<<) means multiple '2'

10 << 3                 10*2 = 20
10 - 1010               20*2 = 40
->1010000 -> 80         40*2 = 80

Right Shift(>>) means floor division of '2'
10 >> 2                 10//12 =5
10(1010)
10 -> 12                5//2  =2

25 >> 3                 25//2 = 12
25(11001)               12//2 = 6
25 -> 3                 6//2  = 3


Conditional Control Statements:
->if
->if else
->if elif else  (elif means "elseif")


What is a condition?
Condition is a logical expression which results True/Flase
ex:
10 > 10
10! = 20
40 < 50


If:
    "IF" is conditional control statement which work for "True" state only


syntax:
        if condition:
                1
                2
                3

        4
        5
 1,2,3 are if block statements
 4,5 are other statements

 output:
 if it is True: 1,2,3,4,5
 if it is Flase: 4,5


if else:
    if else is a conditional control statement which work for "True and False " states

    syntax:
            if conditon:
                    -----1
                    ------2
            else:
                    -----3
                    ------4
     --------5
     --------6

output:
        if condition is True: 1,2,5,6
        if condition is False: 3,4,5,6



if elif else:
            one ifelse can have multiple elif's
        syntax:
               if condition:
                    ------1
                    -------2
               elif condition:
                      -----3
                      -----4
               else:
                    -----7
                    -----8
               -----9
               -----10
           output:
                if is True:1,29,10
                if is false: check elif
                elif is true: 3,4,9,10
                else is false: check elif
                elif is true: 5,6,9,10
                elif is false: 7,8,9,10




--------------After these conditional operators -------------
